"                                  SETTINGS
"        Check :option-list or :options for a complete list of options
"-------------------------------------------------------------------------------

syntax enable
set relativenumber	    " Relative line nbrs
set number nu           " Line nbr on current line
set laststatus=2  	    
set nohlsearch	  	    " Highlight search results"
set incsearch     	    " incremental search
set history=1000  	    " command history"
set ruler         	    " show cursor position"
set showcmd       	    " show incomplete commands"
set noautoindent   	    " auto indentation after line break"
set nosmartindent  	    " smart indent"
set hidden         	    " all buffers are hidden"
set splitright          " open split on the right
set splitbelow          " open split on below
set background=dark	
set encoding=UTF-8
set termguicolors
set tabstop=2
set shiftwidth=2
set expandtab
set wildignore+=node_modules/**
set wildignore+=vendor/**

" Theme Options
" colorscheme OceanicNext
" let g:airline_theme='oceanicnext'
colorscheme snazzy
let g:lightline = {
\ 'colorscheme': 'snazzy',
\ }

" Tmuxline settings
 let g:tmuxline_preset = {
       \'a'    : '#S',
       \'b'    : '#W',
       \'win'  : '#I #W',
       \'cwin' : '#I #W',
       \'x'    : '#(date +%a) #(date +%d.%B)',
       \'y'    : '%R Uhr',
       \'z'    : '#H'}

" Syntastic Settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" Syntastic for PHP
let g:syntastic_php_checkers = ['php', 'phpcs', 'phpmd']
let g:syntastic_php_phpcs_exec = '/home/roman/.composer/vendor/squizlabs/php_codesniffer/bin/phpcs'
let g:syntastic_php_phpcs_args = '--standard=psr2'
let g:syntastic_php_phpmd_exec = '/home/roman/.composer/vendor/phpmd/phpmd/src/bin/phpmd'
let g:syntastic_php_phpmd_post_args = 'cleancode,codesize,controversial,design,unusedcode'

" PHP-cs-fixer Settings
let g:php_cs_fixer_php_path = "php"               " Path to PHP
let g:php_cs_fixer_enable_default_mapping = 1     " Enable the mapping by default (<leader>pcd)
let g:php_cs_fixer_dry_run = 0                    " Call command with dry-run option
let g:php_cs_fixer_verbose = 0                    " Return the output of command if 1, else an inline information.

" Set ctrlP Root to pwd
let g:ctrlp_cmd='CtrlP :pwd'

" Set ctrP to ignore certain directories
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" UltiSnips Settings
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetDirectories=[$HOME.'/.config/nvim/UltiSnips']
let g:snips_author="roman handke"

" ag Settings
if executable('ag')
    let g:ackprg = 'ag --vimgrep'
endif

"let g:gutentags_ctags_executable='ctags -R --exclude="node_modules" --exclude="vendor"'

" xclip clipboard
let g:clipboard = {
  \   'name': 'xclip-xfce4-clipman',
  \   'copy': {
  \      '+': 'xclip -selection clipboard',
  \      '*': 'xclip -selection clipboard',
  \    },
  \   'paste': {
  \      '+': 'xclip -selection clipboard -o',
  \      '*': 'xclip -selection clipboard -o',
  \   },
  \   'cache_enabled': 1,
  \ }

" xDebug Settings
if !exists('g:vdebug_options')
  let g:vdebug_options={}
endif
" let g:vdebug_options.path_maps = {"/var/www/html": '/home/roman/projects/test/public'}
let g:vdebug_options.path_maps = {"/var/www/html": '/home/roman/projects/autovermietung/public'}
let g:vdebug_options.server = ''
" let g:vdebug_options.port = 9000

" Save text folding
autocmd BufWinLeave *.* mkview
autocmd BufWinEnter *.* silent loadview

